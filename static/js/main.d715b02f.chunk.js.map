{"version":3,"sources":["icons/delete-icon.svg","components/Item.js","components/Modal.js","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemComponent","styled","li","Item","props","itemName","onClick","deleteItem","id","src","trashIcon","alt","ModalContainer","div","ModalCard","ButtonContainer","Modal","useState","disabled","setDisabledState","itemValue","setItemState","type","value","onChange","e","target","autoFocus","className","close","addItemToList","localStorage","getItem","setItem","JSON","stringify","getAllListItems","Promise","resolve","reject","parse","Error","list","push","deleteItemFromList","length","splice","Container","ListContainer","ItemList","ul","App","modalState","setModalState","closeModal","setList","fetchData","a","async","res","console","log","then","useEffect","map","item","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d715b02f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete-icon.9b217cd2.svg\";","import styled from 'styled-components'\nimport React from 'react'\nimport trashIcon from '../icons/delete-icon.svg'\n\nconst ItemComponent = styled.li`\n  margin: 0.750em 0;\n  width: 100%;\n  background: var(--white);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 20px;\n  font-weight: 600;\n  border-radius: .3em;\n  box-shadow: 0px 1px 5px 0px var(--grey-light);\n  & p{\n    margin: 0;\n  }\n  & button{\n    border: none;\n    background: transparent;\n    & img{\n      width: 20px;\n      :hover{\n        cursor: pointer;\n        filter: brightness(0.5);\n      }\n  }\n}\n`\n\nconst Item = (props) => (\n  <ItemComponent>\n    <p>{props.itemName}</p> <button onClick={() => props.deleteItem(props.id)}><img src={trashIcon} alt=\"delete\" /></button>\n  </ItemComponent>\n\n)\n\nexport default Item","import styled from 'styled-components'\nimport React, { useState } from 'react'\n\nconst ModalContainer = styled.div`\n  z-index: 999;\n  position: absolute;\n  min-width: 100%;\n  min-height:100%;\n  background: var(--overlay);\n  display: flex;\n  justify-content: center;`\n\nconst ModalCard = styled.div`\n  z-index: 9999;\n  background: var(--white);\n  margin-top: 20vh;\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  height: 200px;\n  padding: 0 24px;\n  border-radius: 10px;\n  box-shadow: 0px 1px 5px 0px var(--grey-light);\n\n  & h2{\n    text-align: center;\n  }\n\n  & input{\n      border: 1px solid var(--grey-light);\n      min-height: 40px;\n      border-radius: 5px;\n      margin-bottom: 24px;\n      padding-left: 10px;\n      font-size: 14px;\n    }\n`\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & button {\n    font-weight: 600;\n    border-radius: .3em;\n    font-size: 16px;\n    min-width: 90px;\n    padding: 10px 0;\n  }\n\n  & button.outline{\n    border: 1px solid var(--grey-mid);\n    background-color: transparent;\n    :hover{\n      cursor: pointer;\n      background: var(--grey);\n    }\n  }\n  & button.primary{\n    background-color: var(--blue-light);\n    border: none;\n    color: white;\n    & :hover{\n      background-color: var(--blue-light-2);\n      cursor: pointer;\n      color: var(--grey);\n    }\n  }\n\n  & button:disabled,\n  button[disabled]{\n    border: 1px solid var(--grey-mid);\n    background-color: var(--grey);\n    color: var(--grey-mid);\n  }\n`\n\n\n\nconst Modal = (props) => {\n  //Enable/disable button\n  const [disabled, setDisabledState] = useState(true)\n  const enableButton = () => setDisabledState(false)\n  const disableButton = () => setDisabledState(true)\n  //Input\n  const handleInput = (e) => {\n    setItemState(e.target.value)\n    if (e.target.value !== '') {\n      enableButton()\n    } else {\n      disableButton()\n    }\n  }\n  const [itemValue, setItemState] = useState('')\n\n\n  return (\n    <ModalContainer>\n      <ModalCard>\n        <h2>Add Item</h2>\n        <input type=\"text\" value={itemValue} onChange={handleInput} autoFocus/>\n        <ButtonContainer>\n          <button className=\"outline\" onClick={props.close} >Cancel</button>\n          <button className=\"primary\" disabled={disabled} onClick={() => props.addItemToList(itemValue)}>Add</button>\n        </ButtonContainer>\n      </ModalCard>\n    </ModalContainer>\n  )\n}\n\nexport default Modal","//Setting Mock Data for first time access\nif(!localStorage.getItem('supermarketList')){\n  const list = ['Beer','Coffee','More Beer']\n  localStorage.setItem('supermarketList', JSON.stringify(list))\n}\n\nexport const getAllListItems = () => new Promise(\n  function (resolve, reject){\n    if(localStorage.getItem('supermarketList')){\n      resolve(JSON.parse(localStorage.getItem('supermarketList')))\n    }else{\n      const errMsg = new Error('No items found')\n      reject(errMsg)\n    }\n  }\n)\n \n\nexport const addItemToList = (itemName) => new Promise(\n  function(resolve, reject){\n    let list = JSON.parse(localStorage.getItem('supermarketList'))\n    if(itemName !== ''){\n      list.push(itemName)\n      localStorage.setItem('supermarketList',JSON.stringify(list))\n      resolve()\n    }else{\n      const errMsg = new Error(\"Can't add null item\")\n      reject(errMsg)\n    }\n  }\n)\n\nexport const deleteItemFromList = (id) => new Promise(\n  function(resolve, reject){\n    let list = JSON.parse(localStorage.getItem('supermarketList'))\n    if(id >= 0 && id <= list.length){\n      list.splice(id,1);\n      localStorage.setItem('supermarketList',JSON.stringify(list))\n      resolve()\n    }else{\n      const errMsg = new Error(\"Can't delete item\")\n      reject(errMsg)\n    }\n  }\n)\n\nexport default {\n  getAllListItems,\n  deleteItemFromList,\n  addItemToList\n}","import React, { useState, useEffect, Fragment } from 'react' \nimport './App.css'\n\nimport styled from 'styled-components'\nimport Item from './components/Item'\nimport Modal from './components/Modal'\nimport {getAllListItems, addItemToList, deleteItemFromList} from './api'\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: var(--grey);\n`\nconst ListContainer = styled.div`\n  width: 90%;\n  max-width: 650px;\n  margin: 0 auto;\n  margin-top: 2.8em;\n\n& > button{\n  width: 100%;\n  background-color: var(--blue-light);\n  color: white;\n  font-weight: 600;\n  border-radius: .3em;\n  font-size: 16px;\n  padding: 20px 20px;\n  border: 1px solid var(--blue);\n  margin-bottom: 2em;\n    :hover{\n    background-color: var(--blue-light-2);\n    cursor: pointer;\n    color: var(--grey);\n    }\n}\n`\n\nconst ItemList = styled.ul`\nlist-style: none;\n  margin: 0;\n  padding: 0;\n`\n\n\nconst App = () => {\n  //Modal\n  const [modalState, setModalState ] = useState(false)\n  const closeModal = () => setModalState(false);\n  const openModal = () => setModalState(true);\n\n  //List handling\n  const [list, setList] = useState([]);\n  //Get all data\n  async function fetchData() {\n    try{\n      const res = await getAllListItems()\n      setList(res)\n    } catch(err){\n      console.log(err)\n    }\n  }\n  //Initialize list\n  useEffect(() => {\n    fetchData()\n  }, [])\n  //Add item\n  async function addItem(value){\n    closeModal()\n    try{\n      await addItemToList(value)\n      .then(fetchData())\n    } catch(err){\n      console.log(err)\n    }\n  }\n  //Delete item\n  async function deleteItem(id) {\n    try{\n      await deleteItemFromList(id)\n      .then(fetchData())\n    } catch(err){\n      console.log(err)\n    }\n  }\n\n  return (\n    <Fragment>\n      {modalState ? <Modal close={closeModal} addItemToList={addItem}></Modal> : null}\n      <Container>\n        <header>\n          <h1>Supermarket List</h1>\n          <small>{list.length} items</small>\n        </header>\n        <ListContainer>\n          <ItemList >\n            {list.map((item, i) => (\n              <Item itemName={item} key={i} id={i} deleteItem={deleteItem}/>\n            ))}\n          </ItemList>\n          <button onClick={openModal}>Add item</button>\n        </ListContainer>\n      </Container>\n    </Fragment>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}